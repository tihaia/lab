1.
#include <stdlib.h>
#include <iostream>

int* stackMemory1(). //объявляем функцию с возращением указателя типа int
{
    int a = 1;  //объявляем переменную а типа int и присваиваем ей значение 1
    return &a;  //возращение к указателю заданной переменной а
}

int* stackMemory2()  //объявляем функцию с возращением указателя типа int
{
    int b = 2;  //объявляем переменную b типа int и присваиваем ей значение 2
    return &b;  //возращение к указателю заданной переменной b
}

int main()
{
    int* b = stackMemory1();  //результат функции stackMemory1 присваивается переменной b
    int a1 = *b;  //a1 присваивает значение, которое получила переменная b от stackMemory1
    int* c = stackMemory2();  //результат функции stackMemory2 присваивается переменной с
    int a2 = *c;  //а2 присваивает значение, которое получила переменная с от stackMemory2
    int a3 = *b;  //ау присваивает значение , которое получила переменная b

    std::cout << a1 << std::endl;  //выводится значение а1 
    std::cout << a2 << std::endl;  //выводится значение а2
    std::cout << a3 << std::endl;  //выводится значение а3
    std::cout << ((std::byte*) b - (std::byte*) c) << std::endl;  //выводится разница в байтах между адресами укащателей b,c 

    return 0;
}

2.
переменная а в:
static_2 - глобальная переменная(видна во всем файле где объявленна)
static_1 - статическая глобальная переменная(видна только в функции где объявленна при условии наличии "static" при объявлении переменной)
чтобы сделать static_2 равным static_1 нужно в static_2 при объявлении переменной дописать static
